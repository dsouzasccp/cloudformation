Description: >
  Template for criation of ECS service
Parameters:
  PriorityNumber:
    Description: Qual o numero da prioridade?
    Type: String
  EnvironmentValue:
    AllowedValues:
    - Qa
    - Prod
    Description: Qual o environment desejado?
    Type: String
  ClusterValue:
    AllowedValues:
    - ECS-Cluster1
    Description: Qual o Cluster desejado?
    Type: String

Mappings:
  Environments:
    Qa:
      VPC: vpc_id
      ASGMAX: '2'
      ASGMIN: '1'
      SubnetAppService:
        - subnet_id
        - subnet_id
        - subnet_id
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
    Prod:
      VPC: vpc_id
      ASGMAX: '4'
      ASGMIN: '1'
      SubnetAppService:
        - subnet_id
        - subnet_id
        - subnet_id
      AvailabilityZones:
        - sa-east-1a
        - sa-east-1b
        - sa-east-1c
  Cluster:
    ECS-Cluster1:
      LoadBalance: AlbEcsLinuxProxy-333992108.sa-east-1.elb.amazonaws.com
      ListenerHttp: arn
      ListenerHttps: arn
      HostedZoneId: Z14MVVACLHVY4T
      HostedZoneName: dominio.com.br
Resources:
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRuleHttp
    Properties:
      ServiceName: !Ref AWS::StackName
      Cluster: !Ref ClusterValue
      Role: !Ref ServiceAutoScalingRole
      DesiredCount:
        Fn::FindInMap:
        - Environments
        - Ref: EnvironmentValue
        - ASGMIN
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref AWS::StackName
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      ContainerDefinitions:
        - Name: !Ref AWS::StackName
          Essential: true
          Image: 123456789.dkr.ecr.us-east-1.amazonaws.com/image
          Memory: 200
          #Environment:
          #  - Name: PRODUCT_SERVICE_URL
          #    Value: !Ref ProductServiceUrl
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}
      VpcId: 
        Fn::FindInMap:
        - Environments 
        - Ref: EnvironmentValue 
        - VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /api/healthcheck
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes: 
        - Key: deregistration_delay.timeout_seconds
          Value: "20"
        - Key: stickiness.enabled
          Value: "true"
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "600"

  ListenerRuleHttp:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::FindInMap:
        - Cluster
        - Ref: ClusterValue
        - ListenerHttp
      Conditions:
      - Field: host-header 
        Values:
        - Fn::Join:
          - "."
          - - !Sub ${AWS::StackName}            
            - Fn::FindInMap:
              - Cluster
              - Ref: ClusterValue
              - HostedZoneName
      Actions:
        - Type: redirect
          RedirectConfig: 
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301
      Priority: !Ref PriorityNumber

  ListenerRuleHttps:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::FindInMap:
        - Cluster
        - Ref: ClusterValue
        - ListenerHttps
      Conditions:
      - Field: host-header
        Values:
        - Fn::Join:
          - "."
          - - !Sub ${AWS::StackName}
            - Fn::FindInMap:
              - Cluster
              - Ref: ClusterValue
              - HostedZoneName
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Priority: !Ref PriorityNumber

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement":
                [
                  {
                    "Effect": "Allow",
                    "Action":
                      [
                        "ec2:AuthorizeSecurityGroupIngress",
                        "ec2:Describe*",
                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                        "elasticloadbalancing:Describe*",
                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                        "elasticloadbalancing:DeregisterTargets",
                        "elasticloadbalancing:DescribeTargetGroups",
                        "elasticloadbalancing:DescribeTargetHealth",
                        "elasticloadbalancing:RegisterTargets"
                      ],
                    "Resource": "*"
                  }
                ]
            }

  ServiceScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity:
        Fn::FindInMap:
        - Environments
        - Ref: EnvironmentValue
        - ASGMAX
      MinCapacity:
        Fn::FindInMap:
        - Environments
        - Ref: EnvironmentValue
        - ASGMIN
      ResourceId: !Join
        - /
        - - service
          - !Ref ClusterValue
          - !GetAtt Service.Name
      RoleARN:
        Fn::GetAtt:
        - ServiceAutoScalingRole
        - Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScaleUpPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: !Sub ServiceScaleUpPolicy ${AWS::StackName}
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 300
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  ServiceScaleDownPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: !Sub ServiceScaleDownPolicy ${AWS::StackName}
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 300
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  MemoryScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: !Sub Memory utilization in ${AWS::StackName} greater than 90%
      AlarmDescription: Alarm if Memory utilization greater than 90% of reserved Memory
      Namespace: AWS/ECS
      MetricName: MemoryUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref ClusterValue
        - Name: ServiceName
          Value: !GetAtt Service.Name
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "3"
      Threshold: "90"
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ServiceScaleUpPolicy

  MemoryScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub Memory utilization in ${AWS::StackName} less than 40%
      AlarmDescription: Alarm if Memory utilization greater than 40% of reserved Memory
      Namespace: AWS/ECS
      MetricName: MemoryUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref ClusterValue
        - Name: ServiceName
          Value: !GetAtt Service.Name
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "10"
      Threshold: "40"
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ServiceScaleDownPolicy

  Route53HostRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Fn::FindInMap:
        - Cluster
        - Ref: ClusterValue
        - HostedZoneId
      Name:
        Fn::Join:
        - "."
        - - !Sub ${AWS::StackName}
          - Fn::FindInMap:
            - Cluster
            - Ref: ClusterValue
            - HostedZoneName
      TTL: '300'
      Type: CNAME
      ResourceRecords:
      - Fn::FindInMap:
        - Cluster
        - Ref: ClusterValue
        - LoadBalance